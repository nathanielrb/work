
#+TITLE: mu.semte.ch Elasticsearch Module
#+OPTIONS: toc:nil num:nil H:4 ^:nil pri:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../org.css"/>
#+INFOJS_OPT: view:content toc:nil 

* Questions
** Auth model, once and for all
** how to specify eager-indexing groups by sparql query?
** Specify 'eager indexing from the semantic model'
* Features
** Environment
*** DONE Initial setup                                          :v0:billed:
    CLOCK: [2018-10-01 16:00]--[2018-10-01 18:00] =>  2:00
    CLOCK: [2018-10-02 16:00]--[2018-10-02 18:00] =>  2:00
    CLOCK: [2018-10-10 16:00]--[2018-10-10 17:30] =>  1:30
    CLOCK: [2018-10-12 16:00]--[2018-10-12 17:00] =>  1:00
*** TODO Wait until Elasticsearch is loaded before loading
** Configuration language
*** DONE Initial setup                                          :v0:billed:
    CLOCK: [2018-10-19 16:00]--[2018-10-19 17:30] =>  1:30
**** Construct configuration language
     Construct configuration language to map base paths `/<type>` to SPARQL queries: eg: `/users` maps to 

     #+BEGIN_SRC sparql
SELECT ?name ?description
WHERE {
  ?uri a foaf:Agent;
       foaf:name ?name;
       dct:description ?description.
}
     #+END_SRC
*** DONE Allow lists of predicates for property paths                    :v1:
    CLOCK: [2018-11-05 lun. 16:15]--[2018-11-05 lun. 17:15] =>  1:00
    eg ex:hasName/foaf:name => ["ex:hasName", "foaf:name"]
** Architecture
*** Harmonize naming                                                     :v1:
     rights/indexes

** Indexing
*** DONE Construct the index endpoint
     Index on path `/<type>/make-index`
   
*** DONE Indexing endpoint for all cases
    CLOCK: [2019-01-28 lun. 14:00]--[2019-01-28 lun. 17:00] =>  3:00
    CLOCK: [2019-01-23 mer. 17:00]--[2019-01-23 mer. 20:00] =>  3:00
*** DONE Batch-process indexing
*** Multithreading and blocking                                          :v1:
    CLOCK: [2018-12-27 16:00]--[2018-12-27 mer. 20:00] =>  4:00
    CLOCK: [2018-11-26 lun. 15:00]--[2018-11-26 lun. 19:00] =>  4:00
    CLOCK: [2018-11-23 ven. 18:00]--[2018-11-23 ven. 20:00] =>  2:00
**** DONE Block simultaneous queries on new/invalid index
    For two queries using the same index, there is no point in the 2nd
    one rebuilding the index.
    And, wait for updated index before searching.
**** Queue and/or block multiple updates from deltas
    And with deltas, multiple incoming deltas should be... queued?
    each one started and canceled?

    Should individual document updates make searches wait?
    ie, status = :updating
**** TODO What about new invalidation in the middle of updating?   :question:
***** First step: block and wait
***** Second step: can we kill it?
      Save updating thread to allow it to be cancelled? 

     - save thread
     - kill thread
     - but also need a way to signal back to original updater to
       continue (and wait at next waiting point)... either a signal,
       or an index-specific mutex just around the updating code
*** DONE On initial indexing, wait before count query                    :v1:
*** Correct use of application graph                                 :v1:fix:
*** DONE Endpoints for resetting, invalidation                           :v1:
**** DONE index all indexes (per type), w/o auth_groups
**** DONE invalidate
*** DONE /index endpoint should delete all docs before indexing          :v1:
*** DONE Links via Document keys
*** TODO Nested objects
**** how to specify
***** A) in-place
      properties: {
        "comment" : {
            type:
            rdf_path
            ...
        }
      }
***** B) linking to other type definition      
      "comment" : { "link" : true, "type" : "comment" }
**** indexing
     build queries (use existing methods recursively)
**** query
     ?filter[comment][text]=good
    
*** TODO Parent/child queries ??
** Access Rights
   In a next step, we assume access rights may spoil the initial
   party.  We need to cope with access rights in order to figure out
   what belongs together.  The most realistic path forward is to
   consume the `mu-auth-used-groups` and compare them with the
   `mu-auth-allowed-groups` for a specific query.

   - Read and parse `MU-AUTH-USED-GROUPS` and `MU-AUTH-ALLOWED-GROUPS`
     when building index.
   - Store `MU-AUTH-USED-GROUPS` and `MU-AUTH-ALLOWED-GROUPS` so you
     can match on it later.
   - Compare MU-AUTH-ALLOWED-GROUPS to select the index to query on
     when the user poses a question.

   #+BEGIN_QUOTE
   NOTE MU-AUTH-ALLOWED-GROUPS always contains the groups from which
   the current user may select.  These are included with the request
   thatâ€™s received from the user.  (If no MU-AUTH-ALLOWED-GROUPS is
   received, it will be calculated on the first request to the
   database.) MU-AUTH-USED-GROUPS is received when a user poses a
   question to the database.  This array follows the same form as
   MU-AUTH-ALLOWED-GROUPS.  It is an array of objects.  If the value
   for the name property of one of these objects appears in
   MU-AUTH-ALLOWED-GROUPS, but not in MU-AUTH-USED-GROUPS, then it
   will never appear there.  This means that if a user pops along, and
   they have the same access rights as a MU-AUTH-ALLOWED-GROUPS of a
   previous query, you will receive the same values again.  If the
   user has less MU-AUTH-ALLOWED-GROUPS, but none which appear in
   MU-AUTH-USED-GROUPs, the same index can be used once again.
   #+END_QUOTE

*** DONE Initial setup                                          :v0:billed:
    CLOCK: [2018-10-11 16:00]--[2018-10-11 17:30] =>  1:30
    CLOCK: [2018-10-16 16:00]--[2018-10-16 19:00] =>  3:00
    CLOCK: [2018-10-17 16:00]--[2018-10-17 17:30] =>  1:30
    CLOCK: [2018-10-18 16:00]--[2018-10-18 18:00] =>  2:00
*** Basic access rights storage and lookup                               :v1:
    CLOCK: [2018-11-05 lun. 17:15]--[2018-11-05 lun. 19:15] =>  2:00
**** DONE Store and lookup indexes in memory
**** DONE Serialize to triplestore and load at boot-up.
     Load at boot-up, and serialize at each addition.
**** DONE Finalize vocabulary for storing in triple-store
     CLOCK: [2018-11-13 mar. 17:30]--[2018-11-13 mar. 18:30] =>  1:00
     Finalize vocabulary. 
**** Basic authorization model
    For:

    - a stored index with groups ALLOWED1 and USED1
    - and a new search with groups ALLOWED2 and USED2

    the stored index can be used when ALLOWED1 <= ALLOWED2 and USED2 <= USED1
**** Enable non-authorized search                                        :v1:
    For testing - when no headers present
** Raw Elasticsearch DSL endpoint
*** Pagination parameters in URL (?)
*** Valid JSON-API for the raw Elasticsearch DSL endpoint
    Get 'from' and 'size' from the query or defaults, and calculate pagination.
** JSONAPI-compliant Request Format
   CLOCK: [2018-12-20 jeu. 17:00]--[2018-12-20 jeu. 18:30] =>  1:30
   CLOCK: [2018-12-19 mer. 16:30]--[2018-12-19 mer. 19:30] =>  3:00
   CLOCK: [2018-12-18 mar. 17:00]--[2018-12-18 mar. 20:00] =>  3:00
*** DONE Correct 'links'                                                 
    Pagination is done, but need to provide full 'next', 'self', 'first', and 'last' links
*** DONE Compare with mu-cl-resources filter syntax                      
*** DONE Search all fields
    Equivalent to ES's 'match_all'
*** DONE All simple search methods                                       
*** DONE Multi Match
GET /_search
{
  "query": {
    "multi_match" : {
      "query":    "this is a test", 
      "fields": [ "subject", "message" ] 
    }
  }
  }
*** DONE Sorting
*** DONE Common Terms
    {
    "query": {
        "common": {
            "body": {
                "query": "this is bonsai cool",
                "cutoff_frequency": 0.001
            }
        }
    }
}

*** DONE Prefix, wildcard, regexp
*** DONE Query String
GET /_search
{
    "query": {
        "query_string" : {
            "default_field" : "content",
            "query" : "this AND that OR thus"
        }
    }
}

and simple:

GET /_search
{
  "query": {
    "simple_query_string" : {
        "query": "\"fried eggs\" +(eggplant | potato) -frittata",
        "fields": ["title^5", "body"],
        "default_operator": "and"
    }
  }
}
*** DONE Terms
POST _search
{
  "query": {
    "term" : { "user" : "Kimchy" } 
  }
}
*** DONE Term sets                                             
GET /_search
{
    "query": {
        "terms" : { "user" : ["kimchy", "elasticsearch"]}
    }
}
*** DONE Fuzzy search                                                    
*** DONE Ranges                                                          
*** Other parameters                                                
    boost, etc.
*** Distinguish between 'query' and 'filter'
** JSONAPI-compliant response
*** DONE Initial setup                                          :v0:billed:
    CLOCK: [2018-10-22 16:00]--[2018-10-22 18:00] =>  2:00
    CLOCK: [2018-10-23 16:00]--[2018-10-23 18:00] =>  2:00
** Querying multiple types
   It should be possible to query over multiple types at the same
   time.  For instance, we may want to search for users, topics, and
   content, within a single search query.  This needs to be configured
   in order to set the appropriate weights.

*** Configurable endpoints for multiple types                            :v1:
    CLOCK: [2018-11-16 ven. 16:30]--[2018-11-16 ven. 17:00] =>  0:30
    CLOCK: [2018-11-07 mer. 17:30]--[2018-11-07 mer. 19:30] =>  2:00
    CLOCK: [2018-11-06 17:00]-[2018-11-06 19:00] =>  2:00
    Add parameter in config.json, and search multiple indexes.
**** DONE Refactor, clean up
     CLOCK: [2018-11-13 mar. 16:30]--[2018-11-13 mar. 17:30] =>  1:09
     CLOCK: [2018-11-12 lun. 16:00]--[2018-11-12 lun. 19:00] =>  3:00
     The inversion currently performed in make_index should be done at
     config time, and in general, the config format should be
     simplified.
**** DONE JSON-API formatted response                                    
**** DONE Enable default mappings when mapping is absent
**** DONE Type name for JSONAPI compliant response
** Stored indexes
   When the application is stopped, and booted up again, the indexes
   donâ€™t need to rebuilt, they can be stored.  As long as the contents
   of the triplestore havenâ€™t changed when the system was offline,
   itâ€™s safe to assume the index is still in tact.

#+BEGIN_QUOTE
   NOTE The Delta service is currently rather naÃ¯ve in that it assumes
   everybody is listening by the time it detects changes. Thereâ€™s a fair
   chance your service boots up too late, and therefore misses some of
   these Deltas.  It is an ongoing story to upgrade the Delta service so
   you can receive recent changes when booting up.
#+END_QUOTE

*** DONE Store indexes on disk                                                
*** TODO Consume deltas on booting up to ensure indexes are correct
*** TODO Endpoint for resetting stored indexes, and documentation             
    CLOCK: [2019-01-30 mer. 17:30]--[2019-01-30 mer. 19:30] =>  2:00
** Eager indexing                                                        :v1:
   CLOCK: [2018-11-27 mar. 16:30]--[2018-11-27 mar. 20:00] =>  3:30
   Indexing on first request has its downsides.  We should be able to
   answer to initial requests quickly, given a set of expected access
   patterns.  When the stack boots up, we will build the indexes for a
   predefined set of MU_AUTH_ALLOWED_GROUPS so users will receive answers
   quickly.
*** DONE Build indexes on boot-up                                        :v1:
    CLOCK: [2018-11-13 18:30]--[2018-11-13 19:00]  =>  0:30
    Build a configuration which indicates the MU_AUTH_ALLOWED_GROUPS
    to be scanned per index (some search indexes may have different
    MU_AUTH_ALLOWED_GROUPS)
*** DONE Discover when the SPARQL endpoint is â€˜upâ€™                       :v1:
    so you can wait if your microservice boots up quicker than
    Virtuoso and/or mu-authorization.
*** DONE Build a fresh index once everything has been booted up correctly :v1:
    Note that you may start receiving Deltas at the same time, so you
    may want to hold off for a moment when starting to build the first
    indexes.
*** TODO Allow groups to be specified by SPARQL Query                    :v1:
    how to do this? need example data...
*** Store the status of your microservice in the triplestore             :v1:
    - Waiting to index
    - Indexing
    - Finished indexing

** Automatic index invalidation
   When users pose a question, we can verify the index, and update it
   automatically.  We will consume the Delta supplied by
   mu-authorization to detect possibly destructive changes. Because of
   this, we need to have a thorough understanding of the contents
   which need to be indexed.  As such, we need to define a new
   specification language to easily reason on.  The specifics of this
   approach need some further detailing.

*** DONE Automatically calculate the index when no index exists          :v0:
*** DONE Define configuration language                                   :v0:
    Define a configuration language to indicate which fields (or
    paths) need to be indexed (this replaces the earlier SPARQL query)
*** DONE Configure lookup table                                          :v1:
     CLOCK: [2018-11-16 ven. 17:00]--[2018-11-16 ven. 19:00] =>  2:00
     CLOCK: [2018-11-20 mar. 16:30]--[2018-11-20 ven. 19:30] =>  3:00
*** DONE Incorporate multi-types                                         :v1:
    CLOCK: [2018-11-27 mar. 15:30]--[2018-11-27 mar. 16:30] =>  1:00

*** Use 'graph' from deltas to check for correct graph                   :v1:
*** Invert delta processing loops for per-index blocking                 :v1:
    Or maybe not. Not sure if this is really necessary.
*** DONE Test authorization before invalidating index                    :v1:
*** DONE Split tabulate and invalidate into 2 functions                  :v1:
*** DONE Cover all cases in invalidation endpoint
    CLOCK: [2019-01-22 mar. 18:00]--[2019-01-22 mar. 20:00] =>  2:00
    authorized and not, type specified or not
** Automatic index updating                                              
   Instead of invalidating the index, letâ€™s update it dynamically.

   Many events from the delta service could be translated directly to
   index updates, rather than index invalidations.  We will detect the
   changes to be made, and apply them directly.  It is ok to pose further
   queries to the SPARQL endpoint in order to figure out the impact of
   the change.

#+BEGIN_QUOTE 
   NOTE This section currently ignores the access rights
   with respect to the Delta Service.  Description of the access
   rights should be considered in another tasks which runs parallel to
   this one.  The inclusion of access rights with the delta service
   will have an impact on how this story unfolds.  It is safe to
   assume that the MU_AUTH_USED_GROUPS for a given
   MU_AUTH_ALLOWED_GROUPS will never change.
#+END_QUOTE

*** DONE Create feature flag                                             :v1:
    Create feature flag to choose between updating the index, and
    clearing the index
*** DONE Build a mapping language                                        :v1:
    Build a mapping language from the Delta Input which caused
    invalidation, to logic which identifies the applicable update
*** DONE Apply the updates as input arrives                              :v1:
    CLOCK: [2018-11-21 mer. 16:00]--[2018-11-21 mer. 19:00] =>  3:00
*** DONE Update documents only in authorized indexes             :problem:v1:
    CLOCK: [2018-11-23 ven. 15:30]--[2018-11-23 ven. 17:30] =>  2:00
*** DONE Error handling for non-existent etc. documents                  :v1:
** Monitor configuration
   CLOCK: [2018-12-21 ven. 17:30]--[2018-12-21 ven. 19:30] =>  2:00
   CLOCK: [2018-12-28 16:00]--[2018-12-28 mer. 20:00] =>  4:00
   CLOCK: [2018-12-29 16:00]--[2018-12-29 mer. 20:00] =>  4:00
    CLOCK: [2018-12-30 16:00]--[2018-12-30 mer. 20:00] =>  4:00
   When configuring the search service during development, it is to be
   expected that the configuration will change often.  Many microservices
   monitor their configuration/code in development mode, and refresh
   their state when changes occur.

*** DONE Detect when the config files change
*** DONE bug: existing indexes are still getting rebuilt
*** DONE bug: indexes not getting removed from triplestore (?)
*** DONE Destroy all indexes on changes
*** DONE Rebuild the necessary indexes
*** DONE Ensure indexes may be lazy-loaded during development
*** DONE Index is 'deleted' multiple times on reload
    maye only with persistence?
*** DONE When changing config from persistent to non-persistent
    Error on searching a non-preloaded index
    only when actually have done /search on previous settings
    so getting lodged in somewhere

    one solution: don't use 'set :x' for reloading, but that makes it
    unintuitive sinatra
** Eager indexing from the semantic model

   Some configuration regarding the MU_AUTH_ALLOWED_GROUPS may be
   dependent on data in the system.  The search should update this
   part of its configuration based on SPARQL queries, rather than
   based on configuration files.

#+BEGIN_QUOTE
NOTE It is clear that, at some point, the Delta service
should be able to inform your service about potential changes to the
result of particular SPARQL queries.  This is an ongoing effort, but
is not expected to mature by the time the search is complete.  We will
therefore let the user manage this in configuration.
#+END_QUOTE

*** Configure with SPARQL
     Allow the user to construct the configuration for
     MU_AUTH_ALLOWED_GROUPS with a SPARQL query
*** Configure Delta triggers
    Allow the user to construct the configuration which defines which
    Deltas trigger recalculating the MU_AUTH_ALLOWED_GROUPS
    configuration function
*** Update when groups change
    Update the indexes only when the resulting MU_AUTH_ALLOWED_GROUPS
    have changed

** Cache
   CLOCK: [2019-01-19 19:00]--[2019-01-19 20:00] =>  1:00
*** make caches clearable
*** clear cache endpoints
*** use deltas to clear caches
    how??
    
    probably need to specify predicates in config
* Code and Testing
** Architecture
*** v0 planning                                                          :v0:
**** Task definition                                            :billed:
     CLOCK: [2018-10-24 18:00]--[2018-10-24 20:00] =>  2:00

*** v1 planning                                                          :v1:
    CLOCK: [2018-12-20 jeu. 18:30]--[2018-12-20 jeu. 20:00] =>  3:00
    CLOCK: [2018-10-26 ven. 16:00]--[2018-10-26 ven. 17:00] =>  1:00
    CLOCK: [2019-01-10 jeu. 18:00]--[2019-01-10 jeu. 19:00] =>  1:00

*** v2 planning
    CLOCK: [2019-03-19 mar. 16:30]--[2019-03-19 mar. 18:30] =>  2:00
** Code Organization
   CLOCK: [2019-01-19 16:00]--[2019-01-19 19:00] =>  3:00
   CLOCK: [2019-01-29 mer. 17:00]--[2019-01-29 mer. 19:00] =>  2:00
   CLOCK: [2019-01-18 16:00]--[2019-01-18 mar. 19:00] =>  0:00
   CLOCK: [2019-01-11 ven. 16:02]--[2019-01-11 ven. 18:02] =>  2:00
   CLOCK: [2018-12-07 ven. 15:00]--[2018-12-07 ven. 16:30] =>  1:30
   CLOCK: [2018-12-06 jeu. 15:00]--[2018-12-06 jeu. 17:30] =>  2:30
*** Use RequestStore for request-specific globals                        :v1:
    for instance, for:
    - path
    - groups
    - index
*** Should memoization be per-request? or short-lived                    :v1:
    The problem being if types change, etc.

** Error Handling
   CLOCK: [2018-12-17 lun. 16:00]--[2018-12-17 lun. 17:30] =>  1:30

*** DONE Error handling on index creation                                :v1:
*** DONE On error, break out of :invalid/:updating loop                  :v1:
** Testing
   CLOCK: [2019-01-10 jeu. 17:00]--[2019-01-10 jeu. 18:00] =>  1:00
*** Full testing setup with rewriter                         :v1:in_progress:
    CLOCK: [2018-12-07 ven. 16:30]--[2018-12-07 ven. 19:00] =>  2:30
    CLOCK: [2018-12-05 mer. 16:00]--[2018-12-05 mer. 20:00] =>  4:00
    CLOCK: [2018-11-29 jeu. 16:00]--[2018-11-29 jeu. 20:00] =>  4:00
    CLOCK: [2018-11-28 mer. 15:30]--[2018-11-28 mer. 19:30] =>  4:00
**** DONE write plugin
**** DONE set up deltas
**** modify rewriter to format queried annotations
     Mu-Queried-Cache-Annotations as { name: , value: }

*** DONE Write tests for automatic index invalidation                    :v1:
*** DONE Write tests for automatic index updating                        :v1:
* Flemish Government Project
** Setup
*** TODO Model Basic domain
    CLOCK: [2019-03-19 mar. 18:30]--[2019-03-19 mar. 20:30] =>  2:00
    CLOCK: [2019-03-17 dim. 16:30]--[2019-03-17 dim. 20:30] =>  4:00
    CLOCK: [2019-03-15 18:00]--[2019-03-15 20:00] =>  2:00
*** TODO Setup environment
* Bugs

* Admin
** Project management
   CLOCK: [2019-03-15 ven. 16:30]--[2019-03-15 ven. 18:00] =>  1:30
   CLOCK: [2018-12-12 jeu. 16:30]--[2018-12-12 jeu. 17:00] =>  0:30
** Calls
*** Initial call                                           :v0:billed:
   CLOCK: [2018-09-22 09:00]--[2018-09-22 10:00] =>  1:00
*** Authorization model and project definition             :v0:billed:
   CLOCK: [2018-10-23 22:15]--[2018-10-23 23:15] =>  1:00
*** Flemish Government Project
    CLOCK: [2019-03-08  10:00]--[2019-03-08 10:30] =>  0:30
** Documentation
*** v1 docs                                                         :v1:
    CLOCK: [2019-01-09 mer. 17:00]--[2019-01-09 mer. 19:00] =>  2:00
    CLOCK: [2018-12-12 jeu. 16:00]--[2018-12-12 jeu. 16:30] =>  0:30
    CLOCK: [2018-11-14 mer. 17:30]--[2018-11-14 mer. 19:00] =>  1:30
* Reporting
** Milestones
*** v0
#+BEGIN: clocktable :maxlevel 2 :scope file :tags "v0"
#+CAPTION: Clock summary at [2018-10-24 mer. 19:43]
| Headline                          |      Time |      |
|-----------------------------------+-----------+------|
| *Total time*                      | *1d 0:00* |      |
|-----------------------------------+-----------+------|
| Admin                             |      4:00 |      |
| \emsp Project management          |           | 2:00 |
| \emsp Calls                       |           | 2:00 |
| Features                          |     20:00 |      |
| \emsp Environment                 |           | 6:30 |
| \emsp Configuration language      |           | 1:30 |
| \emsp Access Rights               |           | 8:00 |
| \emsp JSON-API compliant response |           | 4:00 |
#+END:
*** v1
#+BEGIN: clocktable :maxlevel 2 :scope file :tags "v1"
#+CAPTION: Clock summary at [2018-12-05 mer. 19:53]
| Headline                           | Time       |       |
|------------------------------------+------------+-------|
| *Total time*                       | *1d 23:30* |       |
|------------------------------------+------------+-------|
| Features                           | 1d 9:30    |       |
| \emsp Configuration language       |            |  1:00 |
| \emsp Indexing                     |            |  6:00 |
| \emsp Access Rights                |            |  3:00 |
| \emsp Querying multiple types      |            |  8:30 |
| \emsp Eager indexing               |            |  4:00 |
| \emsp Automatic index invalidation |            |  6:00 |
| \emsp Automatic index updating     |            |  5:00 |
| Code, Testing and Bugs             | 11:30      |       |
| \emsp Tests                        |            | 11:30 |
| Admin                              | 2:30       |       |
| \emsp Architecture                 |            |  1:00 |
| \emsp Documentation                |            |  1:30 |
#+END:
*** total
#+BEGIN: clocktable :maxlevel 2 :scope file
#+CAPTION: Clock summary at [2018-11-27 mar. 19:23]
| Headline                           | Time       |       |
|------------------------------------+------------+-------|
| *Total time*                       | *2d 10:00* |       |
|------------------------------------+------------+-------|
| Features                           | 2d 3:30    |       |
| \emsp Environment                  |            |  6:30 |
| \emsp Configuration language       |            |  1:45 |
| \emsp Indexing                     |            |  6:00 |
| \emsp Access Rights                |            | 10:45 |
| \emsp JSONAPI-compliant response   |            |  4:00 |
| \emsp Querying multiple types      |            |  8:30 |
| \emsp Eager indexing               |            |  3:15 |
| \emsp Automatic index invalidation |            |  5:45 |
| \emsp Automatic index updating     |            |  5:00 |
| Admin                              | 6:30       |       |
| \emsp Architecture                 |            |  3:00 |
| \emsp Calls                        |            |  2:00 |
| \emsp Documentation                |            |  1:30 |
#+END:

** Invoices
*** Invoice 1                                                          :sent:
Sent November 1

| Headline                         |      Time |      |
|----------------------------------+-----------+------|
| *Total time*                     | *1d 0:00* |      |
|----------------------------------+-----------+------|
| Features                         |     20:00 |      |
| \emsp Environment                |           | 6:30 |
| \emsp Configuration language     |           | 1:30 |
| \emsp Access Rights              |           | 8:00 |
| \emsp JSONAPI-compliant response |           | 4:00 |
| Admin                            |      4:00 |      |
| \emsp Architecture               |           | 2:00 |
| \emsp Calls                      |           | 2:00 |


*** Invoice 2                                                          
#+CAPTION: Clock summary at [2018-12-03 lun. 14:07]
| Headline                           | Time       |      |
|------------------------------------+------------+------|
| *Total time*                       | *1d 20:00* |      |
|------------------------------------+------------+------|
| Features                           | 1d 9:30    |      |
| \emsp Configuration language       |            | 1:00 |
| \emsp Indexing                     |            | 6:00 |
| \emsp Access Rights                |            | 3:00 |
| \emsp Querying multiple types      |            | 8:30 |
| \emsp Eager indexing               |            | 4:00 |
| \emsp Automatic index invalidation |            | 6:00 |
| \emsp Automatic index updating     |            | 5:00 |
| Code, Testing and Bugs             | 8:00       |      |
| \emsp Tests                        |            | 8:00 |
| Admin                              | 2:30       |      |
| \emsp Architecture                 |            | 1:00 |
| \emsp Documentation                |            | 1:30 |
#+END:
*** Invoice 3                                                          
#+BEGIN: clocktable :maxlevel 2 :scope file :tstart "2018-12-01" :tend "2018-12-31"
#+CAPTION: Clock summary at [2019-01-22 mar. 19:40]
| Headline                               | Time       |       |
|----------------------------------------+------------+-------|
| *Total time*                           | *1d 16:00* |       |
|----------------------------------------+------------+-------|
| Features                               | 1d 1:30    |       |
| \emsp Indexing                         |            |  4:00 |
| \emsp JSONAPI-compliant Request Format |            |  7:30 |
| \emsp Monitor configuration            |            | 14:00 |
| Code and Testing                       | 13:30      |       |
| \emsp Architecture                     |            |  1:30 |
| \emsp Code Organization                |            |  4:00 |
| \emsp Error Handling                   |            |  1:30 |
| \emsp Testing                          |            |  6:30 |
| Admin                                  | 1:00       |       |
| \emsp Project management               |            |  0:30 |
| \emsp Documentation                    |            |  0:30 |
#+END:
*** Invoice 4                                                          
#+BEGIN: clocktable :maxlevel 2 :scope file :tstart "2019-01-01" :tend "2019-01-31"
#+CAPTION: Clock summary at [2019-02-07 jeu. 16:15]
| Headline                           |    Time |      |
|------------------------------------+---------+------|
| *Total time*                       | *21:00* |      |
|------------------------------------+---------+------|
| Features                           |   10:00 |      |
| \emsp Indexing                     |         | 6:00 |
| \emsp Stored indexes               |         | 2:00 |
| \emsp Automatic index invalidation |         | 2:00 |
| Code and Testing                   |    9:00 |      |
| \emsp Architecture                 |         | 1:00 |
| \emsp Code Organization            |         | 7:00 |
| \emsp Testing                      |         | 1:00 |
| Admin                              |    2:00 |      |
| \emsp Documentation                |         | 2:00 |
#+END:
*** Invoice 5                                                          
#+BEGIN: clocktable :maxlevel 2 :scope file :tstart "2019-03-01" :tend "2019-03-31"
#+CAPTION: Clock summary at [2019-03-19 mar. 20:30]
| Headline                   |    Time |      |
|----------------------------+---------+------|
| *Total time*               | *12:00* |      |
|----------------------------+---------+------|
| Code and Testing           |    2:00 |      |
| \emsp Architecture         |         | 2:00 |
| Flemish Government Project |    8:00 |      |
| \emsp Setup                |         | 8:00 |
| Admin                      |    2:00 |      |
| \emsp Project management   |         | 1:30 |
| \emsp Calls                |         | 0:30 |
#+END:
